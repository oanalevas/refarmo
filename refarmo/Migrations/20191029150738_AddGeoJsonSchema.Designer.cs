// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using refarmo.Models;

namespace refarmo.Migrations
{
    [DbContext(typeof(RNTSContext))]
    [Migration("20191029150738_AddGeoJsonSchema")]
    partial class AddGeoJsonSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("refarmo.Models.Crs", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FeatureCollectionId");

                    b.Property<string>("type");

                    b.HasKey("id");

                    b.HasIndex("FeatureCollectionId")
                        .IsUnique();

                    b.ToTable("Crs");
                });

            modelBuilder.Entity("refarmo.Models.Feature", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FeatureCollectionId");

                    b.Property<string>("Geometryid");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FeatureCollectionId");

                    b.HasIndex("Geometryid");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("refarmo.Models.FeatureCollection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name");

                    b.Property<string>("type");

                    b.HasKey("id");

                    b.ToTable("FeatureCollection");
                });

            modelBuilder.Entity("refarmo.Models.FeatureProperties", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FeatureId");

                    b.Property<int>("area");

                    b.HasKey("id");

                    b.HasIndex("FeatureId")
                        .IsUnique()
                        .HasFilter("[FeatureId] IS NOT NULL");

                    b.ToTable("FeatureProperties");
                });

            modelBuilder.Entity("refarmo.Models.MyGeometry", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<Geometry>("PolygonCoordinates");

                    b.Property<string>("type");

                    b.HasKey("id");

                    b.ToTable("MyGeometry");
                });

            modelBuilder.Entity("refarmo.Models.Properties", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CrsId");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.HasIndex("CrsId")
                        .IsUnique()
                        .HasFilter("[CrsId] IS NOT NULL");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("refarmo.Models.Crs", b =>
                {
                    b.HasOne("refarmo.Models.FeatureCollection", "FeatureCollection")
                        .WithOne("crs")
                        .HasForeignKey("refarmo.Models.Crs", "FeatureCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("refarmo.Models.Feature", b =>
                {
                    b.HasOne("refarmo.Models.FeatureCollection", "FeatureCollection")
                        .WithMany("features")
                        .HasForeignKey("FeatureCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("refarmo.Models.MyGeometry", "Geometry")
                        .WithMany()
                        .HasForeignKey("Geometryid");
                });

            modelBuilder.Entity("refarmo.Models.FeatureProperties", b =>
                {
                    b.HasOne("refarmo.Models.Feature", "Feature")
                        .WithOne("Properties")
                        .HasForeignKey("refarmo.Models.FeatureProperties", "FeatureId");
                });

            modelBuilder.Entity("refarmo.Models.Properties", b =>
                {
                    b.HasOne("refarmo.Models.Crs", "Crs")
                        .WithOne("properties")
                        .HasForeignKey("refarmo.Models.Properties", "CrsId");
                });
#pragma warning restore 612, 618
        }
    }
}
